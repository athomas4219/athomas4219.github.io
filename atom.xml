<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andrew Thomas' Blog]]></title>
  <link href="http://blog.at-dot.net/atom.xml" rel="self"/>
  <link href="http://blog.at-dot.net/"/>
  <updated>2014-05-06T13:49:42-04:00</updated>
  <id>http://blog.at-dot.net/</id>
  <author>
    <name><![CDATA[Andrew Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resizing the Screen Resolution in Ubuntu When You Can't See the Apply Button]]></title>
    <link href="http://blog.at-dot.net/blog/2014/04/16/resizing-the-screen-resolution-in-ubuntu-when-you-cant-see-the-apply-button/"/>
    <updated>2014-04-16T10:48:29-04:00</updated>
    <id>http://blog.at-dot.net/blog/2014/04/16/resizing-the-screen-resolution-in-ubuntu-when-you-cant-see-the-apply-button</id>
    <content type="html"><![CDATA[<p>On a normal day I spend most of my time in Windows 7 and Windows 8 doing my job and playing video games. I&rsquo;m an Apple fanboy, so also have an old Mac (new ones are expensive!). However, I like to experiment with Linux just to see what&rsquo;s up.</p>

<p>I recently installed a beta release of Ubuntu 14.04 into VMware to see what&rsquo;s new. After installation, my resolution was stuck in 800x600, which makes for a very small screen. I went to the display settings panel, changed my resolution to something larger, and went to click the <code>Apply</code> button&hellip;which I couldn&rsquo;t see. No matter what I tried, I could not manage to drag the settings window around such that I could see the Apply button.</p>

<p>A little help from the internet ultimately showed that after clicking the resolution size text box you need <strong>6 tabs</strong>, then <code>Return</code> in order to click the <code>Apply</code> button.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Outlook Has Left the Building]]></title>
    <link href="http://blog.at-dot.net/blog/2014/01/15/outlook-has-left-the-building/"/>
    <updated>2014-01-15T09:49:31-05:00</updated>
    <id>http://blog.at-dot.net/blog/2014/01/15/outlook-has-left-the-building</id>
    <content type="html"><![CDATA[<p>Today I undocked my laptop from my docking station and headed to a meeting. When I arrived, I found that my Outlook had turned into a title bar, looking like this (no, the screenshot is not cut off, that&rsquo;s what it really looked like):</p>

<p><img src="http://blog.at-dot.net/images/OutlookScreenshot.png" title="Outlook Screenshot" alt="Outlook Screenshot"></p>

<p>No matter what I tried, I could not get it back. No other application on my laptop behaved this way, just Outlook.</p>

<p>Ultimately, I found that Outlook could be restored simply by right-clicking on the task bar and selecting <code>Cascade Windows</code>.</p>

<p>Outlook is back!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework 6: Specifying a ConnectionString in Code]]></title>
    <link href="http://blog.at-dot.net/blog/2013/12/29/entity-framework-6-specifying-a-connectionstring-in-code/"/>
    <updated>2013-12-29T07:37:31-05:00</updated>
    <id>http://blog.at-dot.net/blog/2013/12/29/entity-framework-6-specifying-a-connectionstring-in-code</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working recently with Entity Framework 6. So far I find it pleasant enough, although not as intuitive (at least for me) as the likes of NHibernate.</p>

<p>One of the things I wanted to do was to determine the connection string in code, rather than specifying it in my web.config file. You can use the following code snippet to set your connection string.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyContext</span> <span class="p">:</span> <span class="n">DbContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MyContext</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Database</span><span class="p">.</span><span class="n">Connection</span><span class="p">.</span><span class="n">ConnectionString</span> <span class="p">=</span> <span class="n">myAlternateConnectionString</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Google Authentication With DotNetOpenAuth]]></title>
    <link href="http://blog.at-dot.net/blog/2013/12/25/adding-google-authentication-with-dotnetopenauth/"/>
    <updated>2013-12-25T09:50:49-05:00</updated>
    <id>http://blog.at-dot.net/blog/2013/12/25/adding-google-authentication-with-dotnetopenauth</id>
    <content type="html"><![CDATA[<p>Visual Studio 2013 ships with a very nice template to use <a href="http://dotnetopenauth.net/">DotNetOpenAuth</a> for authentication with Google, Twitter, Facebook, and Microsoft. However, it&rsquo;s a little complicated and comes with a lot of cruft. Rather than having too much in my ASP.NET MVC project, I prefer to start with an empty project and add features as I need them. If you are like me, you can use the following instructions to add Google authentication using DotNetOpenAuth.</p>

<h4>Creating the Project</h4>

<p>First, I created an empty MVC project. Once done, I used NuGet to add the <code>DotNetOpenAuth</code> package, which added quite a few other package dependencies. I also added the <code>Microsoft ASP.NET Web Optimization Framework</code> package.</p>

<p>Next, open your <code>web.config</code> file and add a section for forms authentication:</p>

<figure class='code'><figcaption><span>web.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;system.web&gt;</span>
</span><span class='line'>  <span class="nt">&lt;authentication</span> <span class="na">mode=</span><span class="s">&quot;Forms&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;forms</span> <span class="na">loginUrl=</span><span class="s">&quot;~/Account/Logon&quot;</span> <span class="na">timeout=</span><span class="s">&quot;15&quot;</span> <span class="na">slidingExpiration=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/authentication&gt;</span>
</span><span class='line'><span class="nt">&lt;/system.web&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&rsquo;re going to add some controllers and views to our project. These controllers will display a welcome page, which will be unsecured, some methods used for logon, and a home page which will be secured.</p>

<h4>Creating the Welcome Controller</h4>

<p>Right click on your <code>Controllers</code> folder and add a new controller called <code>WelcomeController</code>. This controller will only have an <code>Index</code> method because it will only have a single page with the link to our logon method.</p>

<p>Under the <code>Views</code> folder, right click on the <code>Welcome</code> folder and add a new view called <code>Index</code>. You can add whatever markup you want, but be sure to add a link to our logon controller action somewhere on the page:</p>

<figure class='code'><figcaption><span>Views\Welcome\Index.cshtml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">@Html</span><span class="p">.</span><span class="n">ActionLink</span><span class="p">(</span><span class="s">&quot;Sign In&quot;</span><span class="p">,</span> <span class="s">&quot;Logon&quot;</span><span class="p">,</span> <span class="s">&quot;Account&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Updating the Default Route</h4>

<p>Open the <code>RouteConfig.cs</code> file under the <code>App_Start</code> folder. Change the default controller from <code>Home</code> to <code>Welcome</code>. When you&rsquo;re done, your route should look like:</p>

<figure class='code'><figcaption><span>App_Start\RouteConfig.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">MapRoute</span><span class="p">(</span>
</span><span class='line'>    <span class="n">name</span><span class="p">:</span> <span class="s">&quot;Default&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">:</span> <span class="s">&quot;{controller}/{action}/{id}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">defaults</span><span class="p">:</span> <span class="k">new</span> <span class="p">{</span> <span class="n">controller</span> <span class="p">=</span> <span class="s">&quot;Welcome&quot;</span><span class="p">,</span> <span class="n">action</span> <span class="p">=</span> <span class="s">&quot;Index&quot;</span><span class="p">,</span> <span class="n">id</span> <span class="p">=</span> <span class="n">UrlParameter</span><span class="p">.</span><span class="n">Optional</span> <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Creating the Account Controller</h4>

<p>Right click on your <code>Controllers</code> folder and add a new controller called <code>AccountController</code>. This controller will have three methods, one to perform a redirect to the Google authentication server, a method to process the return call, and a <code>LogOff</code> method to clear the authentication cookie.</p>

<p>Add the following methods to your Account controller:</p>

<figure class='code'><figcaption><span>Controllers\AccountController.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Logon</span><span class="p">(</span><span class="kt">string</span> <span class="n">returnUrl</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">rp</span> <span class="p">=</span> <span class="k">new</span> <span class="n">OpenIdRelyingParty</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="n">rp</span><span class="p">.</span><span class="n">CreateRequest</span><span class="p">(</span><span class="s">&quot;https://www.google.com/accounts/o8/id&quot;</span><span class="p">,</span> <span class="n">Realm</span><span class="p">.</span><span class="n">AutoDetect</span><span class="p">,</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">Request</span><span class="p">.</span><span class="n">Url</span><span class="p">,</span> <span class="n">Url</span><span class="p">.</span><span class="n">Action</span><span class="p">(</span><span class="s">&quot;Authenticate&quot;</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">request</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(!</span><span class="n">String</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">returnUrl</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">request</span><span class="p">.</span><span class="n">AddCallbackArguments</span><span class="p">(</span><span class="s">&quot;returnUrl&quot;</span><span class="p">,</span> <span class="n">returnUrl</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">fetch</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FetchRequest</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">fetch</span><span class="p">.</span><span class="n">Attributes</span><span class="p">.</span><span class="n">AddRequired</span><span class="p">(</span><span class="s">&quot;http://axschema.org/contact/email&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fetch</span><span class="p">.</span><span class="n">Attributes</span><span class="p">.</span><span class="n">AddRequired</span><span class="p">(</span><span class="s">&quot;http://axschema.org/namePerson/first&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fetch</span><span class="p">.</span><span class="n">Attributes</span><span class="p">.</span><span class="n">AddRequired</span><span class="p">(</span><span class="s">&quot;http://axschema.org/namePerson/last&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fetch</span><span class="p">.</span><span class="n">Attributes</span><span class="p">.</span><span class="n">AddRequired</span><span class="p">(</span><span class="s">&quot;http://schemas.openid.net/ax/api/user_id&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">request</span><span class="p">.</span><span class="n">AddExtension</span><span class="p">(</span><span class="n">fetch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">request</span><span class="p">.</span><span class="n">RedirectingResponse</span><span class="p">.</span><span class="n">AsActionResultMvc5</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nf">View</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that we are requesting additional information from the Google authentication server: email address, first name, last name, and the user&rsquo;s unique ID.</p>

<p>Also add the <code>Authenticate</code> method:</p>

<figure class='code'><figcaption><span>Controllers\AccountController.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Authenticate</span><span class="p">(</span><span class="kt">string</span> <span class="n">returnUrl</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">rp</span> <span class="p">=</span> <span class="k">new</span> <span class="n">OpenIdRelyingParty</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">rp</span><span class="p">.</span><span class="n">GetResponse</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">response</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">Status</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">AuthenticationStatus</span><span class="p">.</span><span class="n">Authenticated</span><span class="p">:</span>
</span><span class='line'>                <span class="kt">string</span> <span class="n">identifier</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">ClaimedIdentifier</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">fetch</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">GetExtension</span><span class="p">&lt;</span><span class="n">FetchResponse</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">string</span> <span class="n">email</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">string</span> <span class="n">first</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">string</span> <span class="n">last</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">string</span> <span class="n">userId</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">fetch</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">email</span> <span class="p">=</span> <span class="n">fetch</span><span class="p">.</span><span class="n">GetAttributeValue</span><span class="p">(</span><span class="s">&quot;http://axschema.org/contact/email&quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">first</span> <span class="p">=</span> <span class="n">fetch</span><span class="p">.</span><span class="n">GetAttributeValue</span><span class="p">(</span><span class="s">&quot;http://axschema.org/namePerson/first&quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">last</span> <span class="p">=</span> <span class="n">fetch</span><span class="p">.</span><span class="n">GetAttributeValue</span><span class="p">(</span><span class="s">&quot;http://axschema.org/namePerson/last&quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">userId</span> <span class="p">=</span> <span class="n">fetch</span><span class="p">.</span><span class="n">GetAttributeValue</span><span class="p">(</span><span class="s">&quot;http://schemas.openid.net/ax/api/user_id&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Add your own code to perform any checks in your system to find or create the user returned from Google</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">FormsAuthenticationTicket</span> <span class="n">authTicket</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FormsAuthenticationTicket</span><span class="p">(</span><span class="m">1</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">FormsCookieName</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">90</span><span class="p">),</span>
</span><span class='line'>                    <span class="k">true</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;User data. Perhaps your user&#39;s unique ID?&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">string</span> <span class="n">encryptedTicket</span> <span class="p">=</span> <span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">Encrypt</span><span class="p">(</span><span class="n">authTicket</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">HttpCookie</span> <span class="n">authCookie</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpCookie</span><span class="p">(</span><span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">FormsCookieName</span><span class="p">,</span> <span class="n">encryptedTicket</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">authTicket</span><span class="p">.</span><span class="n">IsPersistent</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                      <span class="n">authCookie</span><span class="p">.</span><span class="n">Expires</span> <span class="p">=</span> <span class="n">authTicket</span><span class="p">.</span><span class="n">Expiration</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">System</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Cookies</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">authCookie</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">Url</span><span class="p">.</span><span class="n">IsLocalUrl</span><span class="p">(</span><span class="n">returnUrl</span><span class="p">))</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nf">Redirect</span><span class="p">(</span><span class="n">returnUrl</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nf">RedirectToAction</span><span class="p">(</span><span class="s">&quot;Index&quot;</span><span class="p">,</span> <span class="s">&quot;Home&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">default</span><span class="p">:</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="n">ModelState</span><span class="p">.</span><span class="n">AddModelError</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">,</span> <span class="s">&quot;An error occurred during login.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="s">&quot;Logon&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take note of a couple of things in the <code>Authenticate</code> method:
* You need to add your own code in this method to check your user store for an existing user, or create it if it doesn&rsquo;t already exist.
* We are creating our authentication ticket manually to give us more control over the cookie. You can store a little bit of information in the user data of the ticket. I store the ID of the user that&rsquo;s logged in, then use that information in a controller base class to lookup the user on each page.</p>

<p>Finally, add our brief <code>LogOff</code> method:</p>

<figure class='code'><figcaption><span>Controllers\AccountController.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">LogOff</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">SignOut</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">RedirectToAction</span><span class="p">(</span><span class="s">&quot;Index&quot;</span><span class="p">,</span> <span class="s">&quot;Welcome&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Creating the Home Controller</h4>

<p>Right click on your <code>Controllers</code> folder and add a new controller called <code>HomeController</code>. This controller will have at least one method to display the index page, but may have more, depending on your application.</p>

<p>Under the <code>Views</code> folder, right click on the <code>Home</code> folder and add a new view called <code>Index</code>. This page cannot be viewed without logging in, so is the first page you&rsquo;ll create in your application that will have secured content.</p>

<p>Open your new <code>HomeController.cs</code> file and add the <code>[Authorize]</code> attribute, so that your <code>HomeController</code> looks like the following. The <code>[Authorize]</code> attribute is what will ensure that this page cannot be viewed by unauthenticated users.</p>

<figure class='code'><figcaption><span>Controllers\HomeController.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[Authorize]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HomeController</span> <span class="p">:</span> <span class="n">BaseController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>    <span class="c1">// GET: /Home/</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Index</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">View</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;ve done everything correctly, once you run the project you&rsquo;ll be presented with your welcome screen. When you click on the <code>Sign In</code> link, you be redirected to the Google logon page, then back to your application&rsquo;s home page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing the Electric Plum iPhone Simulator in Visual Studio 2013]]></title>
    <link href="http://blog.at-dot.net/blog/2013/12/18/installing-the-electric-plum-iphone-simulator-in-visual-studio-2013/"/>
    <updated>2013-12-18T09:51:36-05:00</updated>
    <id>http://blog.at-dot.net/blog/2013/12/18/installing-the-electric-plum-iphone-simulator-in-visual-studio-2013</id>
    <content type="html"><![CDATA[<p>I&rsquo;m going to file this under &ldquo;Late to the Party Again&rdquo;, but I just learned that Microsoft offers a free version of the <a href="http://www.electricplum.com/">Electric Plum</a> iPhone/iPad Simulator through Web Matrix. The version is a lite version, but well worth the free download.</p>

<ol>
<li>First, if you don&rsquo;t already have it, install and run <a href="http://www.microsoft.com/web/webmatrix/">Web Matrix</a>.</li>
<li>Once Web Matrix is open, create a new site (I chose the empty site template).</li>
<li>On the tool bar, click on the <code>Extensions</code> button.</li>
<li>Search for the <code>iPhone Simulator</code> if it&rsquo;s not already on the screen.</li>
<li>Click the <code>Install</code> button and click through to install the simulator.</li>
<li>You may close Web Matrix once the installation is complete.</li>
<li>Start up Visual Studio 2013 and open your solution</li>
<li>Click the down arrow next to the <code>Play</code> button</li>
<li>Click the <code>Browse With</code> menu item</li>
<li>In the <code>Browse With</code> dialog, click the <code>Add</code> button</li>
<li>In the <code>Add Program</code> dialog, navigate to <code>C:\Users\&lt;your account name&gt;\AppData\Local\Microsoft\WebMatrix\Extensions\30\iPhoneSimulator\ElectricMobileSim\ElectricMobileSim.exe</code> in the program field.</li>
<li>In the <code>Arguments</code> field, enter <code>"1"</code> to simulate an iPhone, or <code>"2"</code> to simulate an iPad.</li>
<li>Click the <code>OK</code> button</li>
<li>Now you may select your new emulator from the list of browsers.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Establishing a Trust Relationship or Trusting Local Certificates]]></title>
    <link href="http://blog.at-dot.net/blog/2013/12/17/establishing-a-trust-relationship-or-trusting-local-certificates/"/>
    <updated>2013-12-17T09:52:17-05:00</updated>
    <id>http://blog.at-dot.net/blog/2013/12/17/establishing-a-trust-relationship-or-trusting-local-certificates</id>
    <content type="html"><![CDATA[<p>At work, the certificates in our lab environment are signed by a local certificate authority. Additionally, we do not have the lab intermediate certificate authorities on our local workstations. This means that when we call WCF or REST services we sometimes see the following error:</p>

<pre><code>Could not establish trust relationship for the SSL/TLS secure channel with authority 'someserver.whereiwork.com'.
</code></pre>

<p>This error can be resolved either by importing the intermediate certificate authorities on your workstation, or by using the following code.</p>

<p>Please note that this code should only be executed <strong>once</strong> in your application (<code>global.asax</code>) and <strong>never</strong> in a production environment because it short circuits the protection offered by the PKI.</p>

<p>C#:</p>

<figure class='code'><figcaption><span>C# </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="cp">#if DEBUG</span>
</span><span class='line'>  <span class="n">ServicePointManager</span><span class="p">.</span><span class="n">ServerCertificateValidationCallback</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">cert</span><span class="p">,</span> <span class="n">chain</span><span class="p">,</span> <span class="n">sslPolicyErrors</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have to do this in Visual Basic, use the following:</p>

<figure class='code'><figcaption><span>VB.NET </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vbnet'><span class='line'><span class="cp">#If DEBUG Then</span>
</span><span class='line'>  <span class="n">ServicePointManager</span><span class="p">.</span><span class="n">ServerCertificateValidationCallback</span> <span class="o">=</span> <span class="ow">AddressOf</span> <span class="n">AcceptAllCertificates</span>
</span><span class='line'><span class="cp">#End If</span>
</span><span class='line'>
</span><span class='line'><span class="k">Private</span> <span class="k">Function</span> <span class="nf">AcceptAllCertificates</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">sender</span> <span class="ow">As</span> <span class="kt">Object</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">cert</span> <span class="ow">As</span> <span class="n">X509Certificate</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">chain</span> <span class="ow">As</span> <span class="n">X509Chain</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">sslPolicyErrors</span> <span class="ow">As</span> <span class="n">SslPolicyErrors</span><span class="p">)</span> <span class="ow">As</span> <span class="kt">Boolean</span>
</span><span class='line'>    <span class="k">Return</span> <span class="k">True</span>
</span><span class='line'><span class="k">End</span> <span class="k">Function</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
